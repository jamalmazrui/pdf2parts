PDF2Parts
Version 1.1
November 4, 2015
Copyright 2012 - 2015 by Jamal Mazrui
GNU Lesser General Public License (LGPL)
----------

Contents

Description
Installation
Operation
Change Log
Development Notes
----------

Description

PDF2Parts is a free, open source set of utilities for extracting text, images, URLs, metadata, and individual pages from files in Portable Document Format (PDF).  The executable, pdf2parts.exe, runs as a 32-bit, console-mode process under Windows.  The similarly named library and configuration files, pdf2parts.dll, pdf2parts.tlb, and pdf2parts.ini, are also needed by the program.  Other utilities in the distribution extract particular kinds of parts in case only they are needed:  pdf2metadata.exe, pdf2pages.exe, pdf2images.exe, pdf2graphics.exe, pdf2text.exe, and pdf2urls.exe.
----------

Installation

Unzip the distribution archive, pdf2parts.zip, into its own directory, e.g., to
C:\PDF2Parts

Run one of the executables either by referencing its full path or by adding the installation directory to the Windows search path.

----------

Operation

Pass the PDF to be analyzed as a command-line parameter to the executable, e.g.,

pdf2parts.exe Test.pdf

or

pdf2parts.exe "C:\Temp Files\Test.pdf"

Note that the file parameter should b quoted if it contains a space character.  Two optional command-line parameters specify the Dots Per Inch (DPI) and format of image files.  The default values are 150 for DPI and TIFF for format.  The DPI number can range from about 72 to 300.  Possible formats are BMP, EMF, EMF+, EPS, GIF, JPG, PNG, TIFF, and WMF (capitalization does not matter).  For example, to produce a a 300 DPI PNG image of each PDF page, the syntax could be
pdf2parts.exe test.pdf 300 png

Two types of image files are produced.  An image is created for each PDF page as a whole.  In addition, any graphics embedded within the page are extracted.  For clarity, these will be called page images and embedded graphics.

When run, the program prints to the console how many pages are in the PDF, and how many graphics are in each page.  Several files containing various parts of the PDF are produced.  First, a text file is saved with metadata about the PDF, such as the author, security settings, and whether it is image-only or tagged for accessibility.  Then, for each page, an individual PDF, an image, a text file, and embedded graphics are saved.  Last, a text file with all text is saved.

That text version of the PDF has the same file name except for a .txt extension, e.g.,
Test.pdf

becomes
Test.txt

The text file containing settings of meta data is given "_meta" as a suffix, e.g.,
Test_meta.txt

Similarly, the list of URLs extracted is contained in
test_urls.txt

Other output files have a numeric suffix before the file extension.  The suffix begins with an underline character, followed by the page number.  The page number is right justified with leading 0s so that file names sort properly in a directory listing.  
 
Thus, the text version of page 1 would be
Test_01.txt

The PDF version would be
test_01.pdf

and the image version would be
Test_01.tif

Any graphics embedded in the page are saved to separate files with a longer suffix that includes the sequential number of the image on the page.  A dash precedes the image number.  For example, if the second graphic on page 1 is in BMP format, its corresponding file would be
Test_01-2.bmp

Each utility may be run without command-line parameters to be reminded of its syntax.  The Batch file RunMulti.bat enables a utility to be run against multiple PDF files meeting a wildcard specification.  The first parameter is the utility name and the second parameter is the wildcard specification, e.g.,
RunMulti pdf2text C:\temp\*.pdf
(Note that pdf2text.exe only creates a text version of the whole PDF whereas pdf2parts.exe also creates one for each individual page.)
----------

Change Log

Beta 0.9 on January 27, 2012
Initial public beta.

Beta 0.95 on January 29, 2012
Changed program name from PDF2Images to PDF2Parts, since text files are now also produced as output.  There are a text file with metadata, a text file for each page, and a text file with all text.  In addition to an image file produced for each component image of a page, an image file is also produced for the page as a whole.

Beta 0.98 on February 3, 2012
Used a registration-free COM technique rather than calling a Win32 DLL in order to avoid memory errors when extracting text from PDFs that are not small in size.

Version 1.0 on November 3, 2015
Added Tagged status to PDF metadata.  Added pdf2urls.exe utility.  Added RunMulti batch file.  Uploaded project as a GitHub repository at
https://github.com/JamalMazrui/pdf2parts

Version 1.1 on November 4, 2015
Obtained Tagged status via the QuickPDF library, thereby eliminating need for external pdfinfo.exe utility.  Revised pdf2text.exe so that only a text file of the whole PDF is created.  Thus RunMulti.bat can generate a text file for each PDF matching a wildcard specification, e.g., those in a directory.
----------

Development Notes

The latest version of PDF2Parts is available at
http://EmpowermentZone.com/pdf2parts.zip

This documentation is also directly available online at
http://EmpowermentZone.com/pdf2parts.htm

The *.bas files contain the main source code for the program, built with the PowerBASIC compiler from
http://PowerBASIC.com

The QuickPDF library is used by the program, available from
http://QuickPDFLibrary.com

Note that these are commercial products needed to successfully compile new versions of the executables.  Their source code, however, is open and free to share according to the GNU Lesser General Public License (LGPL).  Batch and include files needed for development of PDF2Parts are also contained in the distribution.  The win2con.exe utility was used to convert each executable from a Windows to console mode binary.

I welcome feedback, which helps PDF2PARTS improve over time.  When reporting a problem, the more specifics, the better, including steps to reproduce it if possible.

